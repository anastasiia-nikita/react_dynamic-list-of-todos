{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["SelectByType","BASE_URL","getTodos","a","fetch","response","json","findUser","userId","TodoList","selectedUserId","currentUserId","useState","todos","setTodos","query","setQuery","All","selectBy","setSelectBy","useEffect","then","todosPrepare","selectTodos","useMemo","filter","todo","title","toLowerCase","includes","Active","completed","Completed","className","type","placeholder","value","onChange","event","target","disabled","onClick","prevTodos","sort","Math","random","map","classnames","readOnly","checked","id","CurrentUser","React","memo","deleteUser","selectedUser","setSelectedUser","user","name","email","phone","App","setSelectedUserId","useCallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3c5d3683.chunk.js","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport classnames from 'classnames';\nimport './TodoList.scss';\nimport { getTodos } from '../../api/api';\nimport { Todo } from '../../react-app-env';\n\ntype Props = {\n  selectedUserId: (userId: number) => void,\n  currentUserId: number,\n};\n\nenum SelectByType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\nexport const TodoList: React.FC<Props> = ({\n  selectedUserId,\n  currentUserId,\n}) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [selectBy, setSelectBy] = useState(SelectByType.All);\n\n  useEffect(() => {\n    getTodos()\n      .then(todosPrepare => setTodos(todosPrepare));\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter(todo => (\n      todo.title.toLowerCase().includes(query.toLowerCase())\n    ));\n  }, [todos, query]);\n\n  const selectTodos = visibleTodos.filter(todo => {\n    switch (selectBy) {\n      case SelectByType.Active:\n        return !todo.completed;\n\n      case SelectByType.Completed:\n        return todo.completed;\n\n      case SelectByType.All:\n      default:\n        return todo;\n    }\n  });\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        type=\"text\"\n        className=\"TodoList__input\"\n        data-cy=\"filterByTitle\"\n        placeholder=\"Please enter a title\"\n        value={query}\n        onChange={(event) => {\n          setQuery(event.target.value);\n        }}\n      />\n\n      <select\n        value={selectBy}\n        className=\"TodoList__select\"\n        onChange={(event) => {\n          setSelectBy(event.target.value as SelectByType);\n        }}\n      >\n        <option value=\"all\" disabled>Choose select</option>\n        <option value=\"all\">All Todos</option>\n        <option value=\"active\">Active Todos</option>\n        <option value=\"completed\">Completed Todos</option>\n      </select>\n\n      <button\n        type=\"button\"\n        className=\"\n        TodoList__user-button\n        button\n        TodoList__user-button--selected\n        TodoList__user-button--random\n        \"\n        onClick={() => {\n          setTodos(prevTodos => [...prevTodos]\n            .sort(() => Math.random() - 0.5));\n        }}\n      >\n        Randomize\n      </button>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {selectTodos.map(todo => (\n            <li\n              className={classnames('TodoList__item', {\n                'TodoList__item--unchecked': !todo.completed,\n                'TodoList__item--checked': todo.completed,\n              })}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classnames('TodoList__user-button', 'button', {\n                  // eslint-disable-next-line max-len\n                  'TodoList__user-button--selected': todo.userId === currentUserId,\n                })}\n                type=\"button\"\n                data-cy=\"userButton\"\n                onClick={() => {\n                  selectedUserId(todo.userId);\n                }}\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { Todo, User } from '../react-app-env';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo []> => {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  return response.json();\n};\n\nexport const findUser = async (userId: number): Promise<User> => {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React, { useState, useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { findUser } from '../../api/api';\nimport { User } from '../../react-app-env';\n\ntype Props = {\n  userId: number;\n  deleteUser: () => void;\n};\n\nexport const CurrentUser: React.FC<Props> = React.memo(({\n  userId,\n  deleteUser,\n}) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    findUser(userId)\n      .then(user => setSelectedUser(user));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${selectedUser?.id}`}</span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\" data-cy=\"userName\">\n        {selectedUser?.name}\n      </h3>\n      <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n      <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n\n      <button\n        type=\"button\"\n        className=\"\n          TodoList__user-button\n          TodoList__user-button--selected\n          button\n          CurrentUser__button\n        \"\n        onClick={deleteUser}\n      >\n        Clear\n      </button>\n    </div>\n  );\n});\n","import React, { useState, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const deleteUser = useCallback(() => {\n    setSelectedUserId(0);\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          selectedUserId={setSelectedUserId}\n          currentUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              deleteUser={deleteUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}